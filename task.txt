I want to build a real-time collaborative coding interview platform with the following features and tech stack:

Core Objective:
Create a web application where:
- An interviewer can create and share a coding session via a link.
- An interviewee joins the session and can code live in a shared editor.
- A question prompt is shown at the top of the editor.
- The code written by either participant is synchronized in real-time.
- The interviewer can observe the live code, chat with the interviewee, and evaluate performance.

Technical Requirements:
Frontend: React + Tailwind (or similar), WebSocket or WebRTC for real-time collaboration.  
Backend: Python (FastAPI, Django, or Flask), with support for WebSockets (e.g., using FastAPIâ€™s `websockets` or Django Channels).  
Database: PostgreSQL (or another relational DB) for users, sessions, and questions.  
Editor: Embed a code editor like Monaco or CodeMirror that supports syntax highlighting and real-time sync.

Functional Features:
- User Authentication (email-based login).
- Create/Join coding session via unique link.
- Assign and view coding question in session.
- Real-time shared code editor.
- Text or voice chat support (optional).
- Timer for tracking the duration of the interview.
- Code execution/sandboxing (optional, securely execute Python/JavaScript code).

AI & Camera Features:
- Integrate face recognition via webcam (use MediaPipe or FaceAPI.js) to:
  - Ensure only one person (the interviewee) is visible on screen.
  - Periodically check during the session and alert if more than one face is detected.
- Allow interviewer to see webcam feed (with consent) for real-time proctoring.

Deliverables:
- Backend code (Python) for real-time socket connection, room/session management, user authentication.
- Frontend code (React) with real-time collaborative code editor, webcam integration, and UI for session handling.
- Instructions for local deployment (Docker if possible).
